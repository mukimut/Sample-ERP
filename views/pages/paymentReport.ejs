<style>
	.card {
		box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
		transition: 0.3s;
	}

	.boxbdymt {
		margin-top: 25px;
	}

	.fa_edt {
		font-size: 22px;
		color: rgb(4, 117, 161);
		font-weight: bold;
	}

	.fa_dlt {
		font-size: 22px;
		color: red;
		font-weight: bold;
	}

	.fa_detail {
		font-size: 24px;
		color: rgb(202, 132, 3);
		font-weight: bold;
	}

	.fa_chk {
		font-size: 22px;
		color: green;
		font-weight: bold;
	}

	.fa_cros {
		font-size: 22px;
		color: red;
		font-weight: bold;
	}

	input[type="date"].form-control,
	input[type="datetime-local"].form-control,
	input[type="month"].form-control,
	input[type="time"].form-control {
		line-height: 13px;
	}

	.nav-tabs-custom>.nav-tabs>li.active {
		border-top-color:
			#519f45;
	}

	.tab_display {
		display: none !important;
	}

	.selectBox {
		position: relative;
	}

	.selectBox select {
		width: 100%;
	}

	.overSelect {
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
	}

	#checkboxes {
		display: none;
		border: 1px #dadada solid;
	}

	#checkboxes label {
		display: block;
	}

	#checkboxes label:hover {
		background-color: #1e90ff;
	}

	input[type=checkbox],
	input[type=radio] {
		margin: 5px 7px 0;
	}
</style>
<div class="content-wrapper">
	<section class="invoice">
		<div class="row">
			<div class="col-xs-12">
				<div class="row">
					<div class="nav-tabs-custom">
						<div class="row" id="addressArea">
							<div class="col-md-12 form-horizontal">
								<div class="box-body">
									<div class="row">
										<div class="col-xs-12">
											<h4 class="box-title">Payment Report
												<button type="button" onclick="downloadPdf()"
													class="btn btn-default btn-sm">Download as PDF</button>
											</h4>
										</div>
									</div>
									<div class="row">
										<div class="col-md-6">
											<div class="form-group">
												<div class="col-sm-12">
													<label>From</label>
													<input type="date" class="form-control" name="bday" id="fromDate">
												</div>
											</div>
										</div>
										<div class="col-md-6">
											<div class="form-group">
												<div class="col-sm-12 ">
													<label>To</label>
													<input type="date" class="form-control" id="toDate">
												</div>
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col-md-6">
											<div class="form-group">
												<div class="col-sm-12">
													<input type="text" class="form-control" id="invoice"
														placeholder="Invoice No">
												</div>
											</div>
										</div>
										<div class="col-md-6">
											<div class="form-group">
												<div class="col-sm-12 ">
													<div class="selectBox" onclick="showCheckboxes()">
														<select class="form-control">
															<option>Select Project</option>
														</select>
														<div class="overSelect"></div>
													</div>
													<div id="checkboxes">
														<label for="one"><input type="checkbox" id="status0" />Waiting for Approval/label>
														<label for="two"><input type="checkbox" id="status1" />Approved by Department Head</label>
														<label for="three"><input type="checkbox" id="status2" />Rejected by Department Head</label>
														<label for="one"><input type="checkbox" id="status3" />Approved by Management</label>
														<label for="two"><input type="checkbox" id="status4" />Rejected by Management</label>
														<label for="three"><input type="checkbox" id="status5" />Paid</label>
														<label for="three"><input type="checkbox" id="status6" />Payment Received</label>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col-md-6">
											<button class="btn btn-flat btn-primary" onclick="payment()"> Payment Report
											</button>
											<button class="btn btn-flat btn-primary" onclick="expense()"> Expense Report
											</button>
										</div>
									</div>
									<br />
									<div class="row">
										<div class="col-md-12 form-horizontal">
											<div class="box">
												<div class="box-body table-responsive no-padding">
													<table class="table table-hover">
														<thead id="tableHead"></thead>
														<tbody id="reportTable"></tbody>
													</table>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<div class="clearfix"></div>
</div>

<script src="/dependencies/jquery.js"></script>
<script src="/js/dropdown.js"></script>
<script src="/js/table.js"></script>
<script src="/plugins/pdfmake/pdfmake.min.js"></script>
<script src="/plugins/pdfmake/vfs_fonts.min.js"></script>
<script src="/js/pdf.js"></script>
<script>
	let cashData = [], approveData = [], hdData = [], currentRow = [];
	const paymentRows = ['Company', 'Date', 'Payment Type', 'Amount'];
	const expenseRows = ['Invoice', 'Purpose', 'Project', 'Type', 'Amount', 'Status'];
	const expanseTitle = 'Expanse Report', paymentTitle = 'Payment Report';
	let title;

	setLovData('tov?type=Projects', 'project', 'Select Project');

	function expense() {
		currentRow = expenseRows;
		addHeading();
		const invoice = document.getElementById('invoice').value;
		const fromDate = document.getElementById('fromDate').value;
		const toDate = document.getElementById('toDate').value;
		const project = getSelectedText('project');

		let link = '/api/expense?';
		if (invoice) link += 'invoice=' + invoice + '&';
		if (project) link += 'project=' + project + '&';
		if (fromDate) link += 'from=' + fromDate + '&';
		if (toDate) link += 'to=' + toDate + '&';

		$.get(link, (res) => {
			reportData = res;
			const reportTable = document.getElementById('reportTable');
			reportTable.innerHTML = '';

			res.forEach(element => {
				const row = reportTable.insertRow();

				addCell(row, element.invoice);
				addCell(row, element.purpose);
				addCell(row, element.project);
				addCell(row, element.type);
				addCell(row, element.amount);
				addCell(row, getStatus(element.approved));
			});
		});
	}

	function payment() {
		currentRow = paymentRows;
		addHeading();
		const fromDate = document.getElementById('fromDate').value;
		const toDate = document.getElementById('toDate').value;
		const link = '/api/payment-report?fromDate=' + fromDate + '&toDate=' + toDate;

		$.get(link, (res) => {
			let creditTotal, debitToal;
			reportData = [{company: 'Debit', created: '', paymentmethod: '', amount: ''}];
			res.filter(e => e.amount > 0).forEach(e => {
				debitToal = e.total;
				reportData.push(e);
			});
			reportData.push({company: 'Total', created: '', paymentmethod: '', amount: debitToal + ''});

			reportData.push({company: 'Credit', created: '', paymentmethod: '', amount: ''});
			res.filter(e => e.amount < 0).forEach(e => {
				creditTotal = e.total;
				reportData.push(e);
			});
			reportData.push({company: 'Total', created: '', paymentmethod: '', amount: creditTotal + ''});
			reportData.push({company: 'Grand Total', created: '', paymentmethod: '', amount: Number.parseFloat(debitToal) + Number.parseFloat(creditTotal)});

			reportData.forEach(element => {
				const row = reportTable.insertRow();

				addCell(row, element.company);
				addCell(row, element.created.substring(0, 10));
				addCell(row, element.paymentmethod);
				addCell(row, element.amount);
			});
		});
	}

	function addHeading() {
		let string = '<th>';
		string += currentRow.join('</th><th>');
		string += '</th>';
		document.getElementById('tableHead').innerHTML = string;
	}

	function downloadPdf() {
		const description = 'From ' + document.getElementById('fromDate').value + ' To ' + document.getElementById('fromDate').value;
		const data = [currentRow];
		if (currentRow == expenseRows) {
			title = expanseTitle;
			reportData.forEach(element => {
				data.push([element.invoice, element.purpose, element.project, element.type, element.amount, getStatus(element.approved)]);
			});
		}
		else {
			title = paymentTitle;
			reportData.forEach(element => {
				data.push([element.company, element.created, element.paymentmethod, element.amount]);
			});
		}

		pdfReport(data, title, 'portrait', description, 10);
	}

	function getStatus(statusValue) {
		let returnValue;
		switch (statusValue) {
			case 0: returnValue = 'Waiting for Approval';
				break;
			case 1: returnValue = 'Approved By Department Head';
				break;
			case 2: returnValue = 'Rejected by Department Head';
				break;
			case 3: returnValue = 'Approved by Management';
				break;
			case 4: returnValue = 'Rejected by Management';
				break;
			case 5: returnValue = 'Paid';
				break;
			case 6: returnValue = 'Payment Received';
				break;
		}
		return returnValue;
	}


	var expanded = false;

	function showCheckboxes() {
		var checkboxes = document.getElementById("checkboxes");
		if (!expanded) {
			checkboxes.style.display = "block";
			expanded = true;
		} else {
			checkboxes.style.display = "none";
			expanded = false;
		}
	}

</script>